#!/usr/bin/python3

import re
import sys
import time
import numpy as np

ifn1 = sys.argv[1] #Neutral model atom
ifn2 = sys.argv[2] #First ionized model atom

with open(ifn1, 'r') as fd1:
	content1 = fd1.read().splitlines()
fd1.close()

with open(ifn2, 'r') as fd2:
	content2 = fd2.read().splitlines()

header1 = content1[0]
header2 = content2[0]

elt1 = re.match('^ *([a-zA-Z]+ *[12]) .*$', header1).groups()[0]
ofn = f"atom.{''.join(elt1.split())}2"
header = f'{elt1}2        generated by mergato {time.asctime()}, Thibault Merle'

ofd = open(ofn, 'w')

print(header, file=ofd)
print(f'* {sys.argv[0]}')
print(f'* From:', file=ofd)
print(f'* {header1}', file=ofd)
print('\n'.join(content1[1:5]), file=ofd)
print(f'* {header2}', file=ofd)
print('\n'.join(content2[1:5]), file=ofd)

#Find the ionization level of neutral species
for record in content1:
	match = re.match("^ *([0-9.]+) *[0-9]+ *'.*' *2 *([0-9]+) *$", record)
	if match:
		idata = match.groups()
		el1_ion = idata[0]
		idx1_ion = int(idata[1])
		break
print(idx1_ion, el1_ion)

#FInd the ionization level of ionized species
for record in content2:
	match = re.match("^ *([0-9.]+) *[0-9]+ *'.*' *3 *([0-9]+) *$", record)
	if match:
		idata = match.groups()
		el2_ion = idata[0]
		idx2_ion = int(idata[1])
		break
print(idx2_ion, el2_ion)


#Copy abundance and mass
for record in content1:
	match = re.match(r"^ *[0-9.]+ *[0-9.]+ *$", record)
	if match:
		print('* ABUND   AWGT', file=ofd)
		print(record, file=ofd)
		break

#Read number of levels, lines, continuum and fixed lines
for i, record in enumerate(content1):
	match = re.match(r"^\* *NK *.*$", record)
	if match:
		nk1, nlin1, ncnt1, nfix1 = map(int, content1[i+1].split())
		break

for i, record in enumerate(content2):
	match = re.match(r"^\* *NK *.*$", record)
	if match:
		nk2, nlin2, ncnt2, nfix2 = map(int, content2[i+1].split())
		break

nk = nk1+nk2-1
nlin = nlin1+nlin2

print('* NK NLIN NCNT NFIX', file=ofd)
print(f'{nk} {nlin} {ncnt1+ncnt2} {nfix1+nfix2}', file=ofd)

print(f'NK1   = {nk1:6d}  NK2   = {nk2:6d}  NK =   {nk:6d} ')
print(f'NLIN1 = {nlin1:6d}  NLIN2 = {nlin2:6d}  NLIN = {nlin:6d} ')
print(f'NCNT1 = {ncnt1:6d}  NCNT2 = {ncnt2:6d}  NCNT = {ncnt1+ncnt2:6d} ')
print(f'NFIX1 = {nfix1:6d}  NFIX2 = {nfix2:6d}  NFIX = {nfix1+nfix2:6d} ')

print('*   E[cm-1]   G           CONFIGURATION & TERM               ION  NK', file=ofd)

#Read the levels
el1, el2 = [], []
for record in content1:
	match = re.match("^ *[0-9.]+ *[0-9]+ *'.*' *[123] *[0-9]+ *$", record)
	if match:
		el1.append(record)

for record in content2:
	match = re.match("^ *[0-9.]+ *[0-9]+ *'.*' *[123] *[0-9]+ *$", record)
	if match:
		el2.append(record)

#Copy levels of neutral species
for i, el in enumerate(el1, start=1):
	if i == idx1_ion:
		pass
	else:
		print(el, file=ofd)

#Copy and increment the indexes of levels of singly ionized species
for i, el in enumerate(el2, start=len(el1)):
	old_e = re.match(r'^( *[0-9.]+) *.*$', el).groups()[0]
	new_e = f'{float(old_e) + float(el1_ion.split()[0]):12.4f}'
	#print(el)
	el = re.sub(old_e, new_e, el)
	el = re.sub(r'[0-9]+ *$', str(i), el)
	#print(el)
	print(el, file=ofd)

print('* RADIATIVE B-B TRANSITIONS', file=ofd)
print('*   J    I    F       NQ QMAX Q0 IW    GA       GVW      GS      LAMBDA[Ã…]    KR   LBD(VALD)  UP  LOW', file=ofd)

#Read and copy BB radiative transitions
for record in content1:
	if 'A0' in record:
		break
	#  2   1  3.304e-08  38 136.0  4.00 0  1.820e-02   -7.820  4.786e-07   122515.6200      1
	match = re.match(r"^ *[0-9]+ *[0-9]+ *[0-9.eE\+\-]+ *[0-9]+ *[0-9.]+ *[0-9.]+ *0 *[0-9.eE\+\-]+ *[0-9.\-]+ *[0-9.eE\+\-]+ *[0-9.]+ *[0-9]+ *[0-9.]+ *'[a-zA-Z]' *'[a-zA-Z]' *$", record)
	if match:
		print(record, file=ofd)

i = 0
for record in content2:
	if 'A0' in record:
		break
	match = re.match(r"^( *[0-9]+)( *[0-9]+) *[0-9.eE\+\-]+ *[0-9]+ *[0-9.]+ *[0-9.]+ *0 *[0-9.eE\+\-]+ *[0-9.\-]+ *[0-9.eE\+\-]+ *[0-9.]+( *[0-9]+) *[0-9.]+ *'[a-zA-Z]' *'[a-zA-Z]' *$", record)
	if match:
		i += 1
		idata = match.groups()
		#print(record)
		record = re.sub(idata[0], str(int(idata[0])+idx1_ion-1), record, count=1)
		record = re.sub(idata[1], ' '+str(int(idata[1])+idx1_ion-1), record, count=1)
		record = re.sub(idata[2], '  '+str(nlin1+i), record)
		#print(record)
		#input()
		print(record, file=ofd)

print('* RADIATIVE B-F TRANSITIONS', file=ofd)
print('* ION   I    A0   NPTS', file=ofd)

#Warning: copy of photoionization tables not yet implemented!
for record in content1:
	if 'COLLISION' in record:
		break
	#	 358 351 4.469e-18 11 911.0
	match = re.match(r'^ *[0-9]+ *[0-9]+ *[0-9.]+[eE][0-9\+\-]+ *[0-9]+ *[0-9.]+ *$', record)
	if match:
		print(record, file=ofd)

for record in content2:
	if 'COLLISION' in record:
		break
	match = re.match(r'^( *[0-9]+)( *[0-9]+) *[0-9.]+[eE][0-9\+\-]+ *[0-9]+ *[0-9.]+ *$', record)
	if match:
		idata = match.groups()
		record = re.sub(idata[0], ' '+str(idx1_ion + idx2_ion - 1), record, count=1)
		record = re.sub(idata[1], ' '+str(int(idata[1])+nk1-1), record, count=1)
		print(record, file=ofd)


print('* COLLISION TRANSITIONS', file=ofd)
print('GENCOL', file=ofd)

start = True
for record in content1:
	if start:
		if 'GENCOL' in record:
			start = False
	elif 'END' in record:
		break
	else:
		print(record, file=ofd)

start = True
for i, record in enumerate(content2):
	if start:
		if 'GENCOL' in record:
			start = False
	else:
		if record.split()[0] in ['OHM', 'UPS_E', 'CH']:
			print(record, file=ofd)
			rec = content2[i+1]
			#   2    1  7.564e-04  8.525e-04  9.047e-04  9.410e-04  9.806e-04  1.027e-03  1.060e-03
			match = re.match('^( *[0-9]+)( *[0-9]+) *[0-9.]+[eE][0-9\+\-].*$', rec)
			if match:
				idata = match.groups()
				rec = re.sub(idata[0], ' '+str(int(idata[0])+nk1-1), rec, count=1)
				rec = re.sub(idata[1], '  '+str(int(idata[1])+nk1-1), rec, count=1)
				print(rec, file=ofd)		
		elif record.split()[0] in ['CI', 'CHI']:
			print(record, file=ofd)
			rec = content2[i+1]
			#159  358  2.960e-10  5.909e-10  8.637e-10  1.141e-09  1.578e-09  2.369e-09  3.240e-09
			match = re.match('^( *[0-9]+)( *[0-9]+) *[0-9.]+[eE][0-9\+\-].*$', rec)
			if match:
				idata = match.groups()
				rec = re.sub(idata[0], ' '+str(int(idata[0])+nk1-1), rec, count=1)
				rec = re.sub(idata[1], '  '+str(idx2_ion+nk1-1), rec, count=1)
				print(rec, file=ofd)

print('END', file=ofd)